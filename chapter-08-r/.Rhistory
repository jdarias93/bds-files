# Asking for a specific column using a logical vector fromn ANOTHER COLUMN!!!
summary(d$depth[d$Percent.GC >= 80])
# Subsetting to summarize average depth in the >= 80 window; it is low compared to:
summary(d$depth[d$Percent.GC < 80])
summary(d$Pi[d$cent])
# Looking at Pi by windows falling in our above centromere window...
summary(d$Pi[!d$scent])
head(d, n=3)
# Check data
nrow(d)
# Check # rows
ncol(d)
# Check # columns
dim(d)
# Check dimensions (r c)
colnames(d)
# Check column names for discrepancies; "X.GC" instead of "%GC"
colnames(d)[12] <- "Percent.GC"
# Changed X.GC
d$depth
# Access a single column of a dataframe with $
mean(d$depth)
# The mean of one column in d
summary(d$depth)
# Summary stats of one column in d
d[ , 1:2]
# Subsetting columns
d[, c("start","end")]
# We can also use column names to acheive the same end
d[1,c("start","end")]
# Only first row of start and end columns
d[, "start", drop=FALSE]
# Disables subsetting as vector (retains dataframe format)
d$cent <- d$start >= 25800000 & d$end <= 29700000
summary(d$total.SNPs)
# SNPs are heavily skewed right: Q3 = 12 but Max = 93! Let's investigate
d$total.SNPs >= 85
# Create logical vector
d[d$total.SNPs >= 85, ]
# Subset according to logical vector
# Only rows that have a TRUE value (total.SNPs >= 85) will be kept.
d[d$Pi > 16 & d$Percent.GC > 80, ]
# A more elaborate subsetting
d[d$Pi > 16 & d$Percent.GC > 80, c("start","end","depth","Pi")]
# One more time but asking for specific columns
d$Percent.GC[d$Pi > 16]
# Asking for a specific column using a logical vector fromn ANOTHER COLUMN!!!
summary(d$depth[d$Percent.GC >= 80])
# Subsetting to summarize average depth in the >= 80 window; it is low compared to:
summary(d$depth[d$Percent.GC < 80])
summary(d$Pi[d$cent])
# Looking at Pi by windows falling in our above centromere window...
summary(d$Pi[!d$scent])
head(d, n=3)
# Check data
nrow(d)
# Check # rows
ncol(d)
# Check # columns
dim(d)
# Check dimensions (r c)
colnames(d)
# Check column names for discrepancies; "X.GC" instead of "%GC"
colnames(d)[12] <- "Percent.GC"
# Changed X.GC
d$depth
# Access a single column of a dataframe with $
mean(d$depth)
# The mean of one column in d
summary(d$depth)
# Summary stats of one column in d
d[ , 1:2]
# Subsetting columns
d[, c("start","end")]
# We can also use column names to acheive the same end
d[1,c("start","end")]
# Only first row of start and end columns
d[, "start", drop=FALSE]
# Disables subsetting as vector (retains dataframe format)
d$cent <- d$start >= 25800000 & d$end <= 29700000
table(d$cent)
# See how many rows were within the centromeric region
sum(d$cent)
# Another way to see how many rows were within region
d$diversity <- d$Pi / (10*1000)
# Rescaling data
summary(d$total.SNPs)
# SNPs are heavily skewed right: Q3 = 12 but Max = 93! Let's investigate
d$total.SNPs >= 85
# Create logical vector
d[d$total.SNPs >= 85, ]
# Subset according to logical vector
# Only rows that have a TRUE value (total.SNPs >= 85) will be kept.
d[d$Pi > 16 & d$Percent.GC > 80, ]
# A more elaborate subsetting
d[d$Pi > 16 & d$Percent.GC > 80, c("start","end","depth","Pi")]
# One more time but asking for specific columns
d$Percent.GC[d$Pi > 16]
# Asking for a specific column using a logical vector fromn ANOTHER COLUMN!!!
summary(d$depth[d$Percent.GC >= 80])
# Subsetting to summarize average depth in the >= 80 window; it is low compared to:
summary(d$depth[d$Percent.GC < 80])
summary(d$Pi[d$cent])
# Looking at Pi by windows falling in our above centromere window...
summary(d$Pi[!d$scent])
d$GC.binned <- cut(d$Percent.GC,5)
d$GC.binned
table(d$GC.binned)
cut(d$Percent.GC, c(0,25,50,75,100))
is.na(cut(d$Percent.GC, c(0,25,50,75,100)))
sum(is.na(cut(d$Percent.GC, c(0,25,50,75,100))))
ggplot(d) + geom_bar(aes(x=GC.binned))
ggplot(d) + geom_bar(aes(x=Percent.GC))
ggplot(d) + geom_density(aes(x=depth, linetype=GC.binned),alpha=0.5)
ggplot(d) + geom_bar(aes(x=Percent.GC), fill=black) # Continuous data histogram
ggplot(d) + geom_bar(aes(x=Percent.GC), fill=TRUE) # Continuous data histogram
ggplot(d) + geom_bar(aes(x=Percent.GC), fill="black") # Continuous data histogram
ggplot(d) + geom_density(aes(x=depth, linetype=GC.binned),alpha=0.5)
ggplot(d) + geom_density(aes(x=depth),alpha=0.5)
ggplot(d) + geom_density(aes(x=Pi, linetype=GC.binned),alpha=0.5)
ggplot(d) + geom_density(aes(x=Total.SNPs, linetype=GC.binned),alpha=0.5)
ggplot(d) + geom_density(aes(x=total.SNPs, linetype=GC.binned),alpha=0.5)
ggplot(d) + geom_bar(aes(x=Pi), binwidth=1) + scale_x_continuous(limits=c(0.01, 80))
ggplot(d) + geom_histogram(aes(x=Pi), binwidth=1) + scale_x_continuous(limits=c(0.01, 80))
ggplot(d) + geom_histogram(aes(x=Pi), binwidth=0.05) + scale_x_continuous(limits=c(0.01, 80))
ggplot(d) + geom_histogram(aes(x=Pi), binwidth=3) + scale_x_continuous(limits=c(0.01, 80))
ggplot(d) + geom_histogram(aes(x=Pi), binwidth=5) +    # Oversmoothing
scale_x_continuous(limits=c(0.01, 80))
ggplot(d) + geom_histogram(aes(x=Pi), binwidth=30) +    # Oversmoothing
scale_x_continuous(limits=c(0.01, 80))
ggplot(d) + geom_histogram(aes(x=Pi), binwidth=2) +    # Oversmoothing
scale_x_continuous(limits=c(0.01, 80))
c(4,3,-1) %in% c(1,3,4,8)
reps <- read.delim("chrX_rmsk.txt.gz",header=TRUE)
getwd()
setwd("~/Desktop/grunt-work/bds-files/chapter-08-r/")
reps <- read.delim("chrX_rmsk.txt.gz",header=TRUE)
setwd("~/Desktop/grunt-work/bds-files/chapter-08-r")
reps <- read.delim("chrX_rmsk.txt.gz",header=TRUE)
reps <- read.delim("chrX_rmsk.txt.gz",header=TRUE)
reps
head(reps,3)
head(reps,3)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
test <- makeVector(x)
cachemean(test)
25 <<- x
x <<- 5
makeCacheMatrix <- function(x = matrix()) {
a <- NULL
set <- function(y) {
x <<- y
a <<- NULL
}
get <- function() x
setmean <- function(mean) a <<- mean
getmean <- function() a
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
matrix(c(1,2,3,4))
matrix(c(1,2,3,4),2,2)
test <- matrix(c(1,2,3,4),2,2)
makeCacheMatrix(test)
solve(test)
det(test)
test
makeCacheMatrix <- function(x = matrix()) {
a <- NULL
set <- function(y) {
x <<- y
a <<- NULL
}
get <- function() x
setinverse <- function(mean) a <<- solve
getinverse <- function() a
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
makeCacheMatrix(test)
a
search(a)
search()
cacheSolve <- function(x, ...) {
a <- x$getinverse()
if(!is.null(a)) {
message("Getting cached data")
return(a)
}
data <- x$get()
a <- solve(data, ...)
x$setmean(a)
a
## Return a matrix that is the inverse of 'x'
}
test
makeCacheMatrix(test)
testa <- makeCacheMatrix(test)
cacheSolve <- function(x, ...) {
a <- x$getinverse()
if(!is.null(a)) {
message("Getting cached data")
return(a)
}
data <- x$get()
a <- solve(data, ...)
x$setmean(a)
a
## Return a matrix that is the inverse of 'x'
}
cacheSolve(testa)
traceback()
debug(cacheSolve(testa))
debug(cacheSolve)
cacheSolve(testa)
a
x
x$get()
cacheSolve <- function(x, ...) {
a <- x$getinverse()
if(!is.null(a)) {
message("Getting cached data")
return(a)
}
data <- x$get()
a <- solve(data, ...)
x$setinverse(a)
a
## Return a matrix that is the inverse of 'x'
}
undebug(cacheSolve)
cacheSolve(testa)
test <- matrix(rnorm(10000),100,100)
test
makeCacheMatrix(test)
testa <- makeCacheMatrix(test)
cacheSolve(testa)
makeCacheMatrix <- function(x = matrix()) {
a <- NULL
set <- function(y) {
x <<- y
a <<- NULL
}
get <- function() x
setinverse <- function(inverse) a <<- solve
getinverse <- function() a
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
getwd()
getwd()
?st
?str
str(str)
str(lm)
x <- rnorm(100,2,4)
summary(x)
str(x)
f <- gl(40,10)
f
summary(f)
str(f)
libray(datasets)
library(datasets)
head(airquality)
str(airquality)
airquality <- airquality
m <- matrix(rnorn(100),10,10)
m <- matrix(rnorm(100),10,10)
str(m)
m[,1]
s <- split(airquality, airquality$Month)
str(m)
m[,1]
str(s)
str(s)
str(dnorm)
str(pnorm)
str(qnorm)
str(rnorm)
x <- rnorm(10)
set.seed(1)
rnorm(5)
rnorm(5)
set.seed(1)
rnorm(4)
rpois(10,1)
str(rpois)
ppois(2,2)
class(d$repClass)
c(4,3,-1) %in% c(1,3,4,8) # Outputs a logical vector with equal length as left vector
reps <- read.delim("chrX_rmsk.txt.gz",header=TRUE)
getwd()
getwd()
setwd("/Users/jdarias/Desktop/grunt-work/bds-files/chapter-08-r/")
setwd("/Users/jdarias/Desktop/grunt-work/bds-files/chapter-08-r/")
reps <- read.delim("chrX_rmsk.txt.gz",header=TRUE)
# Simple Operation to check if some a vector's values are in another vector: %in%
c(4,3,-1) %in% c(1,3,4,8) # Outputs a logical vector with equal length as left vector
setwd("/Users/jdarias/Desktop/grunt-work/bds-files/chapter-08-r/")
reps <- read.delim("chrX_rmsk.txt.gz",header=TRUE)
head(reps,3)
class(d$repClass)
class(d$repClass)
reps <- read.delim("chrX_rmsk.txt.gz",header=TRUE)
head(reps,3)
class(reps$repClass)
levels(reps$repClass)
levels(reps$repClass)
reps$repClass == "SINE"
common_repclass <- c("SINE","LINE","LTR","DNA","Simple_repeat")
common_repclass
reps[reps$repClass %in% common_repclass, ]
sort(table(reps$repClass), decreasing=TRUE)[1:5]
top5_repclass <- names(sort(table(reps$repClass), decreasing=TRUE)1:5)
top5_repclass <- names(sort(table(reps$repClass), decreasing=TRUE)[1:5])
top5_repclass
sort(table(reps$repClass), decreasing=TRUE)[1:5]
top5_repclass <- names(sort(table(reps$repClass), decreasing=TRUE)[1:5])
top5_repclass
match(c("A","C","E","A"),c("A","B","A","E"))
set.seed(20)
e <- rnorm(100,0,2)
y <- 0.5 + 2*x + e
summary(y)
set.seed(20)
x <- rnorm(100)
e <- rnorm(100,0,2)
y <- 0.5 + 2*x + e
summary(y)
plot(x,y)
y <- 0.5 + 2*x + e
summary(y)
set.seed(10)
x <- rbinom(100,1,0.5)
e <- rnorm(100,0,2)
y <- 0.5 + 2*x + e
summary(y)
plot(x,y)
x
set.seed(1)
x <- rnorm(100)
log.mu <- 0.5 + 0.3 * x
y <- rpois(100, exp(log.mu))
summary(y)
plot(x,y)
x
log.mu
plot(x,y)
summary(y)
plot(x,y)
set.seed(1)
sample(1:10,4)
sample(1:10,4)
sample(letters,5)
sample(letters,5)
sample(letters,5)
set.seed(1)
sample(1:10,4) # Randomly sample 4 numbers from a vector of numbers 1-10
sample(1:10,4) # This changes everytime you iterate GIVEN YOUR SEED
sample(letters,5)
sample(1:10)
sample(1:10)
sample(1:10)
sample(1:10, replace=TRUE)
set.seed(1)
sample(1:10,4) # Randomly sample 4 numbers from a vector of numbers 1-10
sample(1:10,4) # This changes everytime you iterate GIVEN YOUR SEED
sample(letters,5)
sample(1:10)
sample(1:10)
sample(1:10, replace=TRUE)
system.time(readLines("http://www.jhsph.edu"))
hilbert <- function(n) {
i <- 1:n
1/outer(i-1,i,"+")
}
hilbert(1000)
x <- hilbert(1000)
system.time(svd(x))
system.time({
n <- 1000
r <- numeric(n)
for (i in 1:n) {
x <- rnorm(n)
r[i] <- mean(x)
}
})
mtfs <- read.delim("motif_recombrates.txt",header=TRUE)
mtfs <- read.delim("motif_recombrates.txt",header=TRUE)
setwd("/Users/jdarias/Desktop/grunt-work/bds-files/chapter-08-r/")
mtfs <- read.delim("motif_recombrates.txt",header=TRUE)
setwd("/Users/jdarias/Desktop/grunt-work/bds-files/chapter-08-r/")
mtfs <- read.delim("motif_recombrates.txt",header=TRUE)
head(mtfs, 3
head(mtfs, 3)
head(mtfs, 3)
rpts <- read.delim("motif_repeats.txt", header=TRUE)
setwd("/Users/jdarias/Desktop/grunt-work/bds-files/chapter-08-r/")
mtfs <- read.delim("motif_recombrates.txt",header=TRUE)
rpts <- read.delim("motif_repeats.txt", header=TRUE)
head(mtfs, 3)
head(rpts,3)
mtfs$pos <- paste(mtfs$chr, mtfs$motif_start, sep="-")
rpts$pos <- paste(rpts$chr, rpts$motif_start, sep="-")
head(mtfs,2)
mtfs$post
mtfs$pos
table(mtfs$pos %in% rpts$pos)
i <- match(mtfs$pos, rpts$pos)
table(is.na(i))
i <- match(mtfs$pos, rpts$pos)
table(is.na(i))
mtfs$repeat_name <- repts$name[i]
mtfs$repeat_name <- reps$name[i]
mtfs$repeat_name <- rpts$name[match(mtfs$pos, rpts$pos)]
head(mtfs[!is.na(mtfs$repeat_name), ], 3)
mtfs$repeat_name <- rpts$name[match(mtfs$pos, rpts$pos)]
head(mtfs[!is.na(mtfs$repeat_name), ], 3)
mtfs$pos <- paste(mtfs$chr, mtfs$motif_start, sep="-")
rpts$pos <- paste(rpts$chr, rpts$motif_start, sep="-")
table(mtfs$pos %in% rpts$pos) # 9218 TRUE.
i <- match(mtfs$pos, rpts$pos) # Creates indexing vector
table(is.na(i)) # Number of NAs match the number of mts$pos elements NOT in rprts$pos
mtfs$repeat_name <- reps$name[i]
mtfs$repeat_name <- rpts$name[match(mtfs$pos, rpts$pos)]
head(mtfs[!is.na(mtfs$repeat_name), ], 3)
mtfs_inner <- mtfs[!is.na(mtfs$repeat_name), ]
nrow(mtfs_inner)
recm <- merge(mtfs,rpts, by.x = "pos", by.y="pos")
head(recm, 2)
recm <- merge(mtfs,rpts,by.x="pos",by.y="pos",all.x=TRUE) # A left OUTER join
recm_left <- merge(mtfs,rpts,by.x="pos",by.y="pos",all.x=TRUE) # A left OUTER join
recm <- merge(mtfs,rpts, by.x = "pos", by.y="pos") # An INNER join
head(recm_left, 3)
head(recm, 2)
head(recm, 2)
recm_left <- merge(mtfs,rpts,by.x="pos",by.y="pos",all.x=TRUE) # A left OUTER join
recm <- merge(mtfs,rpts, by.x = "pos", by.y="pos") # An INNER join
head(recm, 2)
recm_left <- merge(mtfs,rpts,by.x="pos",by.y="pos",all.x=TRUE) # A left OUTER join
head(recm_left, 3)
swirl()
library(swirl())
rm(list=ls())
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants,10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace=TRUE)
sample(1:6, 4, replace=TRUE)
sample(1:20,10)
LETTERS
sample(letters)
sample(LETTERS)
sample(c(0,1), 100, replace=TRUE, prob=c(0.3,0.7))
flips<-sample(c(0,1), 100, replace=TRUE, prob=c(0.3,0.7))
flips
sum(flips)
?rbinom
rbinom(1,size=100,prob=0.7)
flips2 <- rbinom(100,100,0.7)
rbinom(n=100,size=1,.7)
flips2 <- rbinom(n=100,size=1,.7)
flips2
sum(flips2)
?norm
?rnorm
rnorm(10)
rnorm(10,mean=100,sd=25)
rpois(5,10)
my_pois <- replicate(100,rpois(5,10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
